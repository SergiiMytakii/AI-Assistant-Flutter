import 'package:firebase_cloud_firestore/firebase_cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart' as auth;

import 'package:injectable/injectable.dart';
import 'package:logger/logger.dart';
import 'package:ai_assiatant_flutter/domain/data_sources/firebase_data_source.dart';
import 'package:ai_assiatant_flutter/domain/entities/user.dart';

@dev
@prod
@Injectable(as: FirebaseDataSource)
class DatabaseServiceFirebase implements FirebaseDataSource {
  var log = Logger();
  final db = FirebaseFirestore.instance;

  DatabaseServiceFirebase() {
    db.settings = const Settings(persistenceEnabled: true);
  }

  //get songs
  @override
  Future<QuerySnapshot> getFromFirebase(
    String collectionName, {
    Map<String, dynamic>? filters,
    Map<String, dynamic>? search,
    Map<String, bool>? orderBy,
  }) async {
    Query query = db.collection(collectionName);
    if (filters != null && filters.isNotEmpty) {
      for (var filter in filters.entries) {
        query = query.where(filter.key, isEqualTo: filter.value);
      }
    }
    if (search != null && search.isNotEmpty) {
      for (var search in search.entries) {
        query = query.where(search.key, arrayContains: search.value);
      }
    }

    if (orderBy != null && orderBy.isNotEmpty) {
      return query
          .orderBy(orderBy.entries.first.key,
              descending: orderBy.entries.first.value)
          .get();
    } else {
      return await query.get();
    }
  }

  @override
  Future<QuerySnapshot> updateToFirebase(User? user, String collectionName,
      String id, Map<String, dynamic> data) async {
    final CollectionReference collection = db.collection(collectionName);
    final DocumentReference documentRef = collection.doc(id);
    await documentRef.update(data);
    final QuerySnapshot snapshot = await collection.get();
    return snapshot;
  }

//replace  existing document with new one
  @override
  Future<QuerySnapshot> postToFirebase(
      User? user, String collectionName, Map<String, dynamic> data,
      {String? docReference}) async {
    final CollectionReference collection = db.collection(collectionName);

    final DocumentReference documentRef =
        collection.doc(docReference ?? data['id'].toString());
    await documentRef.set(data, SetOptions(merge: true));
    final QuerySnapshot snapshot = await collection.get();
    return snapshot;
  }

  //add a new doc with autogenerated doc reference (doc id)
  @override
  Future<QuerySnapshot> addToFirebase(
      User? user, String collectionName, Map<String, dynamic> data,
      {String? docReference}) async {
    final CollectionReference collection = db.collection(collectionName);
    await collection.add(data);
    final QuerySnapshot snapshot = await collection.get();
    return snapshot;
  }

  @override
  Future<QuerySnapshot> deleteToFirebase(
      User? user, String collectionName, String id) async {
    final CollectionReference collection = db.collection(collectionName);
    final DocumentReference documentRef = collection.doc(id.toString());
    await documentRef.delete();
    final QuerySnapshot snapshot = await collection.get();
    return snapshot;
  }
}
